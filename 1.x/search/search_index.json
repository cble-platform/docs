{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<ul> <li> <p> Set up in 10 minutes</p> <p>Use the auto-installer to get up and running in minutes</p> <p> Getting started</p> </li> <li> <p> Configure with just YAML</p> <p>Focus less on configuration and more on creating a high quality experience for your users</p> <p> Config Reference</p> </li> <li> <p> Made for flexibility</p> <p>Use the powerful provider system to adapt to virtually any cloud environment</p> <p> Providers</p> </li> </ul>"},{"location":"#project-inspiration","title":"Project Inspiration","text":"<p>This project was proposed as an Independent Study at Rochester Institute of Technology as a part of my (Bradley Harker) Cybersecurity MS degree program in the Fall 2023 semester. The original project proposal is here:</p> Independent Study Proposal <p>The goal of this independent study is to develop a fully-automated self-service virtual lab environment that aims to be both scalable and flexible to fit any form of deployment as well as learn about requirements engineering, project planning, and project design throughout the process. The platform will be provider agnostic, allowing it to conform to any public or private cloud provider to host the underlying virtual lab machines. It will support both legacy and modern work-flows for lab development, speeding up the process of evolving course content. The intention is to expand this into production to offer a replacement for the current Remote Laboratory Emulation System (RLES) and integrate in the Computing Security/Cybersecurity future curriculum. The project will include proofing the ease of migration by migrating existing course lab content to the new platform. The requirements engineering will be performed by interviewing multiple stakeholders involved in the project such as: RIT Faculty (ITS/Teaching Staff), Students, and External Academic Institution Faculty. Doing this will help general the project requirements needed to satisfy all potential stakeholders in the project. Project design will be performed surrounding the requirements identified. A report of this process will be written and presented to describe both the findings of the interviews and the resulting design extrapolated from the findings. No current course in the CSEC curriculum offers this kind of opportunity to develop a product (the platform) in collaboration with a client (RIT) and teach the project design and project management progress.</p> <p>The project was then continued as a Capstone Project at Rochester Institute of Technology as a part of my (Bradley Harker) Cybersecurity MS degree program in the Spring 2024 semester. The paper abstract is here:</p> Capstone Project Abstract <p>[To be added]</p>"},{"location":"getting-started/installation/","title":"Installation","text":"<p>Base OS Selection</p> <p>This deployment has only been tested on Fedora 38/39 and Ubuntu 22.04</p>"},{"location":"getting-started/installation/#automatic-installation-recommended","title":"Automatic Installation (Recommended)","text":"<p>Use the auto-installer to download CBLE and its prerequisites:</p> <pre><code>. &lt;(curl -fsSL https://get.cble.io)\n</code></pre> <p>Shell Support</p> <p>The auto installer has only been tested with the zsh and bash shells</p> <p>Follow the automatic installer prompts to automatically configure CBLE:</p> <pre><code>Installing Docker...\n# Executing docker install script, commit: xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\n# ... docker install output ...\n\nCloning into 'cble'...\n# ... git output ...\nWould you like to perform auto-configuration of CBLE? [Y/n] Y\nAre you using SSL (requires DNS to be set up)? [Y/n] Y\nWhat is the domain (FQDN) you plan to use (e.g. cble.io): &lt;your fqdn&gt;\nWould you like to generate random passwords/keys? [Y/n] Y\nDefault admin account username [cble]: cble\nDefault admin account first name [CBLE]: CBLE\nDefault admin account last name [Admin]: Admin\n\nCBLE has been installed and auto-configured!\n\nOnce ready, start CBLE with:\n\n    cd cble\n    docker compose -f docker-compose.local.yml build\n    docker compose -f docker-compose.local.yml up -d\n\nThen log in with the following credentials:\n\n    Name: CBLE Admin\n    Username: cble\n    Password: &lt;random password&gt;\n</code></pre> <p>Now run CBLE with:</p> <pre><code>cd cble\ndocker compose -f docker-compose.local.yml build\ndocker compose -f docker-compose.local.yml up -d\n</code></pre>"},{"location":"getting-started/installation/#manual-installation","title":"Manual Installation","text":""},{"location":"getting-started/installation/#installation-methods","title":"Installation Methods","text":""},{"location":"getting-started/installation/#docker-recommended","title":"Docker (Recommended)","text":"<p>Install Docker with:</p> <pre><code>curl -fsSL https://get.docker.com/ | sh\n</code></pre> <p>Clone the CBLE repository:</p> <pre><code>git clone https://github.com/cble-platform/cble\n</code></pre> <p>Move into the deploy directory and create local configuration files from the provided examples:</p> <pre><code>cd cble\ncp config.example.yaml config.local.yaml\ncp Caddyfile.example Caddyfile\ncp docker-compose.yml docker-compose.local.yml\n</code></pre> <p>To start CBLE, first build the container images and the run the containers:</p> <pre><code>docker compose -f docker-compose.local.yml build\ndocker compose -f docker-compose.local.yml up -d\n</code></pre>"},{"location":"getting-started/installation/#system-wide","title":"System-wide","text":"<p>Coming soon.</p>"},{"location":"getting-started/installation/#configuration","title":"Configuration","text":"<p>For these next steps you'll need to know the Fully Qualified Domain Name (FQDN) of the deployment. This would look something like <code>https://docs.cble.io</code>.</p> <p>FQDN Configuration</p> <p>The FQDN must have DNS set up in order to perform automatic TLS certificate provisioning. Be sure to set up your DNS <code>A/AAAA</code> records to point to the CBLE server.</p> <p>First, edit the <code>config.local.yaml</code> file (see Config File Reference for more options):</p> config.local.yaml<pre><code># ...\nserver:\n  hostname: &lt;your fqdn&gt;\n  # ...\n  ssl: true # enable this to auto-provision a TLS certificate\n  # ...\n  origins:\n    - https://&lt;your fqdn&gt; # put your FQDN here\n# ...\ndatabase:\n  # ...\n  password: &lt;secure password&gt; # set this to a secure password for the database\n# ...\nauth:\n  jwt_key: &lt;random jwt key&gt; # generate a random value here\n  # (easy method; requires node) node -e \"console.log(require('crypto').randomBytes(64).toString('hex'));\"\n  # ...\ninitialization:\n  default_admin:\n    # ...\n    password: &lt;secure password&gt; # generate a secure password for the default admin user\n  # ...\n</code></pre> <p>Place your FQDN at the top of the <code>Caddyfile</code>:</p> Caddyfile<pre><code>&lt;your fqdn&gt; { # be sure to delete the \"http://\" at the beginning\n    # ...\n}\n</code></pre> <p>Update the configuration in the <code>docker-compose.local.yml</code>:</p> docker-compose.local.yaml<pre><code>services:\n  frontend:\n    build:\n      # ...\n      args:\n        - VITE_API_BASE_URL=https://&lt;your fqdn&gt; # put your FQDN here\n    # ...\n  backend:\n    # ...\n  db:\n    # ...\n    environment:\n      # ...\n      - POSTGRES_PASSWORD=&lt;secure password&gt; # secure password from the `database` section of `config.local.yaml`\n      # ...\n</code></pre>"},{"location":"getting-started/installation/#login-to-cble","title":"Login to CBLE","text":"<p>You can now visit the CBLE dashboard at <code>https://&lt;your fqdn&gt;</code>. You should be greeted with the login page:</p> <p></p> <p>Log in with the username and password you created during configuration.</p>"},{"location":"getting-started/quick-intro/","title":"Quick Introduction","text":"<p>CBLE is a highly scalable and flexible platform providing a fully automated self-service lab portal making teaching with hands-on virtual lab content easy and fast. It's designed to use cloud-agnostic resources defined in blueprints which use complex dependency-graphs to enable the fastest possible deployments.</p> <p>Before You Continue</p> <p>Make sure you have installed and configured CBLE using the Installation guide.</p>"},{"location":"getting-started/quick-intro/#create-your-first-provider","title":"Create Your First Provider","text":"<p>CBLE uses Providers to connect to cloud providers. They provide a way to abstract the complex nuance of deploying infrastructure to clouds like Amazon Web Services or Microsoft Azure.</p> <p>To get create your first provider:</p> <ol> <li>Navigate to the Providers tab in the main navigation bar</li> <li>Click the Create button</li> <li>Give the provider a Name</li> <li>Enter the Git URL to the provider (see Supported Providers)</li> <li>Select/Enter a Version to use (dropdown should be auto-populated)</li> <li>Enter the Configuration for the provider (the provider repository will provide an example configuration)</li> <li>Click the Create button to create the provider</li> </ol> <p>Note</p> <p>The provider version can be a Git Tag or Commit Hash</p> <p></p>"},{"location":"getting-started/quick-intro/#load-your-provider","title":"Load Your Provider","text":"<p>Providers have to be loaded into the provider cache (see Providers - How it Works) to be used by CBLE. Providers are loaded into the provider cache  automatically when CBLE boots, however, after creation they must be loaded manually.</p> <p>Now that you've created your first provider, you can load the provider by clicking the Load button.</p> <p></p> <p>If successful, a Loaded Provider! notification should appear.</p> <p>The usual cause of errors during when loading is an incorrect configuration. Double-check your config and try loading again</p> <p>If you need to modify the configuration after a provider is loaded, you can use the Reconfigure button to update the configuration without reloading the provider.</p> <p></p>"},{"location":"getting-started/quick-intro/#create-your-first-blueprint","title":"Create Your First Blueprint","text":"<p>Blueprints are a way to define an environment that your users can request a copy of. Upon request, the blueprint will be used to create an individual deployment of this environment.</p> <p>Note</p> <p>Blueprints will be specific to the provider you've selected. Please visit the provider's repository to find example templates that can be used with your provider.</p> <p>To create your first blueprint:</p> <ol> <li>Navigate to the Blueprints tab in the main navigation bar</li> <li>Click the Create button</li> <li>Give the blueprint a name</li> <li>Select the provider you just created</li> <li>Provide a description for the blueprint</li> <li>Place a sample blueprint from your provider into the template field</li> <li>Click the Create button to save the blueprint</li> </ol> <p></p> <p>Fixing Common Errors</p> <p>If you get a <code>Failed to update blueprint: failed to load resource: ...</code> error, this indicates something is wrong with your blueprint and your provider is unable to understand it. Make sure to double-check your template syntax.</p>"},{"location":"getting-started/quick-intro/#request-your-first-deployment","title":"Request Your First Deployment","text":"<p>Now that you've created your first blueprint, it should appear on the Blueprints page:</p> <p>You're ready to request a deployment of the test environment. To do so, click the Request button.</p> <p>Deployments consume resources in the cloud and as such each project has defined resource quotas to constrain the amount of resources any given group is using. If a deployment will exceed your resource quotas, CBLE will not allow you to request it.</p> <p>So, to deploy this blueprint select the default project and then click the Request button:</p> <p></p> <p>Your deployment is now being provisioned! It will now show up on the Deployments page. Each deployment has a lease time after which it will automatically be deleted. This is to prevent any one user from keeping deployments around that aren't used.</p> <p></p> <p>Tip</p> <p>You can customize the name of the deployment by hovering on the name and clicking the  icon.</p> <p>Clicking on the deployment, we now get a visualization of all of the resources we just deployed and can interact with them:</p> <p></p> <p>Tip</p> <p>You can easily identify resources you can interact with by looking at the dependency graph. A  means you can get a console to the resource. A  means you can control the power state of the resource.</p> <p>Resources that support controls will have a  icon and allows you to execute actions against a resource such as controlling the power state of the resource.</p>"},{"location":"getting-started/quick-intro/#destroy-your-deployment","title":"Destroy Your Deployment","text":"<p>Now we can destroy the deployment to tear down all of the resources we previously deployed. This will automatically be performed for you after the lease expires for the deployment.</p> <ol> <li>Open the Actions menu</li> <li>Select the  Destroy Deployment option</li> <li>Click the  Destroy button to confirm the destruction of the deployment</li> </ol> <p>The deployment is now destroyed!</p>"},{"location":"getting-started/blueprints/concepts/","title":"Concepts","text":"<p>There are a few key concepts to understand when working with CBLE blueprints:</p>"},{"location":"getting-started/blueprints/concepts/#resources","title":"Resources","text":"<p>A resource represents something which could be deployed in the cloud. This might be a server, a database, a load balancer, a router, anything you can deploy in the cloud (with provider support).</p> <p>Let's use this resource as an example:</p> Example resource<pre><code>host1:\n  resource: openstack.v1.host\n  config:\n    hostname: host1\n    image: UbuntuJammy2204\n    flavor: medium\n    disk_size: 10\n    networks:\n      network1:\n        dhcp: false\n        ip: 10.10.0.1\n  depends_on:\n    - router1\n</code></pre> <p>There is a lot to unpack here, but let's unpack line-by-line:</p> <ol> <li><code>host1:</code> - This represents a unique key which can be used to reference this resource elsewhere in the blueprint</li> <li><code>resource: openstack.v1.host</code> - Defines the type of resources this reference represents (in this case a host on OpenStack)</li> <li><code>config:</code> - This entire block is going to be unique to each provider used. Values here are used by the provider to    deploy/configure the intended resource</li> <li><code>depends_on</code> - This is a list of other resource references (like line 1) on which this resource depends. This resource    will not be deployed until all <code>depends_on</code> resources are successful. This resource will be destroyed before any <code>depends_on</code>    resources are destroyed</li> </ol> <p>For more information on resource configs for a provider, please refer to the provider's documentation.</p>"},{"location":"getting-started/blueprints/concepts/#data-source","title":"Data Source","text":"<p>A data source represents something which is already deployed in the cloud. This might be a server, a database, a load balancer, a router, anything you can deploy in the cloud (with provider support).</p> <p>Let's use this data source as an example:</p> Example data source<pre><code>main_nat:\n  data: openstack.v1.network\n  config:\n    name: MAIN-NAT\n</code></pre> <p>While this looks similar to a resource, instead of using the <code>config</code> block to deploy and configure a resource, the provider will look up an existing resource in the attached cloud environment which matches this config.</p>"},{"location":"getting-started/blueprints/overview/","title":"Blueprints","text":"<p>CBLE Blueprints are a custom YAML-based configuration language inspired by Terraform and Docker Compose v3 syntax.</p> <p>Here is what a basic blueprint looks like:</p> openstack-example.yaml<pre><code>version: \"1.0\" # (1)!\n\nhost1:\n  resource: openstack.v1.host # (2)!\n  config: # (3)!\n    hostname: host1\n    image: UbuntuJammy2204\n    flavor: medium\n    disk_size: 10\n    networks:\n      network1:\n        dhcp: false\n        ip: 10.10.0.1\n    depends_on: # (4)!\n      - router1\n\nmain_nat:\n  data: openstack.v1.network # (5)!\n  config:\n    name: MAIN-NAT\n\nhost2:\n  resource: openstack.v1.host\n  config:\n    hostname: \"{{ .Host2Hostname }}\"\n    image: UbuntuJammy2204-Desktop\n    flavor: medium\n    disk_size: 25\n    networks:\n      main_nat:\n        dhcp: true\n    depends_on:\n      - host1\n\nnetwork1:\n  resource: openstack.v1.network\n  config:\n    subnet: 10.10.0.0/24\n    gateway: 10.10.0.254\n    dhcp:\n      - start: 10.10.0.10\n        end: 10.10.0.100\n\nrouter1:\n  resource: openstack.v1.router\n  config:\n    external_network: main_nat\n    networks:\n      network1:\n        dhcp: false\n        ip: 10.10.0.254\n</code></pre> <ol> <li>This version refers to the version of blueprint syntax. This may change over time.</li> <li>This is called a resource type. Resource types are how CBLE knows what type of resource to deploy for this object.</li> <li>This is the resource config. A config is unique to the type of provider you're using.</li> <li><code>depends_on</code> is similar to Docker Compose v3. This allows us to wait on other objects to deploy before we    deploy this object (and destroy this object before we destroy the parents). Providers should provide inherent    dependencies based on resource types.</li> <li>This is called a data type. Data types are similar to resource types, but instead of deploying resources they    pull pre-existing resources and information from the provider without modification.</li> </ol>"},{"location":"getting-started/projects/overview/","title":"Overview","text":"<p>Projects provide a scope to contain Blueprints and Deployments. This scope allows CBLE to track the usage and access to all objects within a project for all users.</p> <p></p> <p>In the scope of blueprints, projects act as a library or catalog of blueprints that users can access to deploy. A blueprint must have a parent project to live in, otherwise, CBLE would not be able to perform access control on blueprints.</p> <p>When requesting a deployment, the user must select a project to deploy it into. Projects track the combinerd resource usage of all the deployments within it and ensure that the project's resource quota's are not exceeded. This enables administrators to limit how many resources any given user/group is using. Deployments do not have to be deployed into the same project as the blueprint and in fact this enables a use case where you can have a \"General Catalog\" project containing blueprints all users can access and then a \"&lt;Username&gt;'s Project\" for each user to deploy into.</p>"},{"location":"getting-started/projects/permissions/","title":"Permissions","text":"<p>Projects can be shared with Users and Groups through memberships. Each membership is assigned a Role. These roles are used to give permissions to the members of a project. Roles act as a tiered permission system, each higher role inheriting the permissions of the roles below it.</p> <p>There are four distinct roles a project member can have:</p> Role Permissions <code>Admin</code> <ul><li>Manage project information (name, quotas, etc.)</li><li>All <code>Developer</code> permissions</li></ul> <code>Developer</code> <ul><li>Develop blueprints in a project and share them</li><li>All <code>Deployer</code> permissions</li></ul> <code>Deployer</code> <ul><li>Deploy blueprints into a project</li><li>Redeploy/Delete deployments</li><li>All <code>Viewer</code> permissions</li></ul> <code>Viewer</code> <ul><li>View deployments in a project and interact with them</li></ul>"},{"location":"getting-started/providers/how-it-works/","title":"How it Works","text":""},{"location":"getting-started/providers/how-it-works/#design","title":"Design","text":"<p>The CBLE server is designed to connect to many different providers at once. In doing so, a main go routine monitoring all incoming registration requests wait for registrations. Once one is received, a new go routine is spawned with a client to connect to that provider's gRPC server.</p> <p> </p> CBLE Provider gRPC Design"},{"location":"getting-started/providers/how-it-works/#loading-providers","title":"Loading Providers","text":"<p>To load providers into CBLE, you must provide a Git remote, tag (version), and name for the provider. This will be used to fetch and compile the provider into the provider cache.</p> <p>The basic flow of loading CBLE providers is as follows:</p> <pre><code>flowchart\n  init[\"Initialize Provider\"]\n  init-- Exists in provider cache --&gt;checkGitTag\n  init-- Doesn't exist in provider cache --&gt;clone\n  checkGitTag[\"Inspect checked out git tag (version)&lt;br /&gt;\"]\n  checkGitTag-- Doesn't match expected version --&gt;checkoutVersion\n  checkGitTag-- Matches expected version --&gt;runProvider\n  clone[\"Clone from git\"]\n  clone--&gt;checkoutVersion\n  checkoutVersion[\"Checkout requested tag (version)\"]\n  checkoutVersion--&gt;runProvider\n  runProvider[\"Run provider in runtime environment\"]\n  linkStyle 0,3 color:green;\n  linkStyle 1,2 color:red;</code></pre> <p>This flow is triggered on startup for CBLE for any pre-existing providers in the database and can be triggered manually by calling the <code>loadProvider</code> GraphQL mutation.</p>"},{"location":"getting-started/providers/how-it-works/#runtime","title":"Runtime","text":"<p>Providers use one of two supported runtime environments: <code>docker</code> or <code>shell</code>. This is configured using the <code>type</code> value in the <code>cble-metadata.yml</code> file located in the root of the provider.</p> Example of cble-metadata.yml from provider-openstack<pre><code># From https://github.com/cble-platform/provider-openstack/blob/main/cble-metadata.yml\n\nname: provider-openstack\ndescription: Builder that interfaces with Openstack\nauthor: Bradley Harker &lt;github.com/BradHacker&gt;\nversion: v1.0.0-alpha\n\ntype: docker\n\ndocker:\ndockerfile: Dockerfile\ncmd: ./provider_openstack\n</code></pre> <p>For more information on writing a <code>cble-metadata.yml</code> file, see Writing a Provider.</p>"},{"location":"getting-started/providers/how-it-works/#registration","title":"Registration","text":"<p>Providers, on startup, will register themselves with the CBLE server in order to establish a peristent gRPC connection. This process also prevents rogue providers from starting up without knowing the provider ID ahead of time.</p> <p>After an initial handshake process, the provider will start up its own gRPC server which can be used to provider commands to the provider. This process is as follows:</p> <pre><code>sequenceDiagram\n  autonumber\n  participant C as CBLE gRPC Server\n  participant P as Provider gRPC Client\n\n  note over P: Startup\n\n  critical Checks protocol versions\n    P-&gt;&gt;C: Handshake(client_version)\n    C-&gt;&gt;P: HandshakeReply(server_version)\n  option Versions don't match\n    note over C,P: Connection Terminated\n  end\n\n  P-&gt;&gt;C: RegisterProvider(id, name, version, features)\n  note over C: Store provider [id], name, and version\n  C-&gt;&gt;P: RegisterReply(status, socket_id)\n  note over P: Start provider gRPC server\n  note over C: Connect to provider on&lt;br /&gt;/tmp/cble-provider-[id].sock</code></pre>"},{"location":"getting-started/providers/how-it-works/#commands","title":"Commands","text":"<p>As of now, there are a few pre-defined commands the CBLE server can issue to providers. These are <code>Configure</code>, <code>Deploy</code>, and <code>Destroy</code>.</p> <p>These commands are issued via the gRPC provider client for the specified provider. Very rarely will you have to directly interact with these as they are abstracted by GraphQL mutations within the CBLE API.</p>"},{"location":"getting-started/providers/how-it-works/#configure","title":"<code>Configure</code>","text":"<p>This command is used to reload the configuration of a provider without having to restart the provider itself. Configurations are stored within the CBLE database for portability and because of this, this command is executed on each startup of the providers.</p>"},{"location":"getting-started/providers/how-it-works/#deploy","title":"<code>Deploy</code>","text":"<p>This command deploys a given blueprint. The deployment state and any variables stored are returned to CBLE as maps.</p> <p>Note</p> <p>This command will eventually return a gRPC stream in order to provider real-time feedback on deployment progress. You can track the progress of that here.</p>"},{"location":"getting-started/providers/how-it-works/#destroy","title":"<code>Destroy</code>","text":"<p>This command destroys a given deployment. The deployment state and any variables stored are returned to CBLE as maps.</p> <p>Note</p> <p>This command will eventually return a gRPC stream in order to provider real-time feedback on deployment progress. You can track the progress of that here.</p>"},{"location":"getting-started/providers/how-it-works/#unregistration","title":"Unregistration","text":"<p>Unregistration occurs when a provider is ready to shutdown and would like to do so gracefully. Without this, the gRPC clients created by the CBLE server would panic. To accomplish this, the provider will send an unregister request to the CBLE server (using it's gRPC client) and then will gracefully shutdown it's gRPC server, disconnecting all clients in the process.</p> <pre><code>sequenceDiagram\n  autonumber\n  participant C as CBLE gRPC Server\n  participant P as Provider gRPC Client\n\n  P-&gt;&gt;C: UnregisterProvider(id, name, version)\n  note over C: Send shutdown signal to&lt;br /&gt;provider client routine\n  C-&gt;&gt;P: UnregisterReply(status)\n  note over P: Gracefully shutdown gRPC server</code></pre>"},{"location":"getting-started/providers/overview/","title":"Providers","text":"<p>Providers in CBLE are the link between CBLE Blueprints and the \"real world\" (aka. the cloud). CBLE Providers are designed to be standalone binaries which use gRPC for inter-process communication (IPC). This IPC is done via a local unix socket and can optionally be secure with TLS (not currently supported).</p>"},{"location":"getting-started/providers/overview/#supported-providers","title":"Supported Providers","text":"<p>A list of official providers is here:</p> <ul> <li>cble-platform/provider-openstack (<code>https://github.com/cble-platform/provider-openstack</code>)</li> </ul> <p>You can also provider your own provider if you'd like. See Writing a Provider section for more information.</p>"},{"location":"getting-started/providers/writing-a-provider/","title":"Writing a Provider","text":""},{"location":"getting-started/providers/writing-a-provider/#provider-template","title":"Provider Template","text":"<p>Get started with the official CBLE Provider repository template:</p> <p>Get Provider Template </p>"},{"location":"getting-started/providers/writing-a-provider/#metadata","title":"Metadata","text":"<p>Metadata files let CBLE know how to install, build, and execute providers at runtime. As of writing, providers only support 2 modes of operation: <code>docker</code> and <code>shell</code>. All of this information should be located in a file called <code>cble-metadata.yaml</code> in the root of your provider repository.</p> <p>Providers need to support some basic fields to describe the provider overall. Here\u2019s an example from provider-openstack:</p> <pre><code>name: provider-openstack\ndescription: Builder that interfaces with Openstack\nauthor: Bradley Harker &lt;github.com/BradHacker&gt;\nversion: v1.0.0-alpha\n\ntype: docker # docker, shell\n</code></pre>"},{"location":"getting-started/providers/writing-a-provider/#provider-types","title":"Provider Types","text":"<p>For each provider type, you must specify the respective block within your <code>cble-metadata.yaml</code>:</p>"},{"location":"getting-started/providers/writing-a-provider/#docker","title":"Docker","text":"<p>The <code>docker</code> runtime builds a container image and executes the provider in a Docker container.</p> Provider docker metadata options<pre><code>docker:\n  dockerfile: &lt;location of the provider dockerfile&gt;\n  cmd: &lt;command to run provider&gt; # the ID will be passed as the last positional argument\n</code></pre>"},{"location":"getting-started/providers/writing-a-provider/#shell","title":"Shell","text":"<p>The <code>shell</code> runtime executes a provider as a subprocess and requires installing prerequisites via command hooks.</p> Provider shell metadata options<pre><code>shell:\n  prebuild_cmd: &lt;commands to install prerequisites (optional)&gt;\n  build_cmd: &lt;commands to build provider binary&gt;\n  exec_cmd: &lt;command to run provider&gt; # the ID will be passed as the last positional argument\n</code></pre>"},{"location":"references/config-file/","title":"Config File","text":"<p>Note</p> <p>All defaults are pulled from the <code>config.example.yaml</code> file. For instructions on configuring production environments see Installation - Configuration.</p>"},{"location":"references/config-file/#global-options","title":"Global Options","text":"<p>Applies to all components of CBLE</p> Option Type Default Description <code>debug</code> Boolean <code>false</code> Enables/disables low level debug logging"},{"location":"references/config-file/#server","title":"<code>server</code>","text":"<p>Configures the CBLE webserver</p> Option Type Default Description <code>hostname</code> String <code>localhost</code> The FQDN of the server <code>port</code> String <code>8080</code> The webserver port (must match <code>Caddyfile</code> <code>/api</code> route) <code>ssl</code> Boolean <code>false</code> Enforces the use of secure cookies <code>gql_introspection</code> Boolean <code>true</code> Allows GraphQL Introspection against the API <code>origins</code> []String <code>http://localhost:8080</code><code>http://localhost:3000</code> Allowed origins for CORS"},{"location":"references/config-file/#database","title":"<code>database</code>","text":"<p>Configures the connection from CBLE to the database</p> Option Type Default Description <code>username</code> String <code>cble</code> The PostgreSQL username <code>password</code> String <code>cble</code> The PostgreSQL password <code>host</code> String <code>db</code> The hostname/IP of the PostgreSQL container/host <code>ssl</code> Boolean <code>false</code> Enforces a SSL/TLS connection to PostgreSQL"},{"location":"references/config-file/#providers","title":"<code>providers</code>","text":"<p>Configures the handling of providers</p> Option Type Default Description <code>cache</code> String <code>/tmp/cble-providers</code> The location where providers are downloaded, built, and executed from"},{"location":"references/config-file/#auth","title":"<code>auth</code>","text":"<p>Configures user authentication</p> Option Type Default Description <code>jwt_key</code> String <code>xxxxxxxxxxx...</code> The secret key used to sign JWT authentication tokens <code>session_timeout</code> Duration <code>24h0m0s</code> Length of user session validity"},{"location":"references/config-file/#initialization","title":"<code>initialization</code>","text":"<p>Options used to configure CBLE on first boot</p> Option Type Default Description <code>default_project</code> String <code>default</code> The name of the default project <code>admin_group</code> String <code>CBLE Administrators</code> The name of the default admin group"},{"location":"references/config-file/#default_admin","title":"<code>default_admin</code>","text":"<p>Configuration for the default admin user (admin access granted to default project)</p> Option Type Default Description <code>first_name</code> String <code>CBLE</code> First name for the default user <code>last_name</code> String <code>Admin</code> Last name for the default user <code>username</code> String <code>cble</code> Username for the default user <code>password</code> String <code>cble</code> Password for the default user"},{"location":"references/config-file/#deployments","title":"<code>deployments</code>","text":"<p>Configures the behavior of deployments</p> Option Type Default Description <code>auto_suspend_time</code> Duration <code>3h0m0s</code> Time until deployments are automatically suspended <code>lease_time</code> Duration <code>2160h0m0s</code> Time until deployments are automatically destroyed"},{"location":"references/config-file/#project_defaults","title":"<code>project_defaults</code>","text":"<p>Configures the default quotas for new projects</p> Option Type Default Description <code>quota_cpu</code> Int <code>10</code> Maximum number of CPU cores (set to <code>-1</code> for infinite) <code>quota_ram</code> Int <code>32768</code> Maximum MiB of RAM (set to <code>-1</code> for infinite) <code>quota_disk</code> Int <code>131072</code> Maximum MiB of disk space (set to <code>-1</code> for infinite) <code>quota_network</code> Int <code>1</code> Maximum number of networks (set to <code>-1</code> for infinite) <code>quota_router</code> Int <code>1</code> Maximum number of routers (set to <code>-1</code> for infinite)"}]}